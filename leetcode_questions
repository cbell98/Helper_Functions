# Closest pair to target among 2 arrays:

a1 = [-1, 3, 8, 2, 9, 5, 7, 12, 18, -6, 11]
a2 = [4, 1, 2, 10, 5, 20, 22, -7, 33, 19, 6]
target = 18

def closestPair(a1: list, a2: list, target: int) -> list:

    goal = target
    loss = 1000

    for num in a1:
        
        for digit in a2:
            sum = num + digit
            diff = abs(sum - goal)
            if diff == 0:
                return num, digit
            else:
                if diff < loss:
                    loss = diff
                    closest_num = num
                    closest_digit = digit
                    
    return closest_num, closest_digit

closestPair(a1, a2, target)



def factorial(n):

    if n >= 1:
        return n * factorial(n-1)
    else:
        return 1

factorial(8)



def fib(n):

    if n >= 3:
        return fib(n-1) + fib(n-2)
        
    else:
        return 1

fib(3)



You are given the root of a binary search tree (BST) and an integer val. Find the node in the BST that the node's value equals val 
and return the subtree rooted with that node. If such a node does not exist, return null.
class Solution:
    def searchBST(self, root: Optional[TreeNode], val: int) -> Optional[TreeNode]:
        
        stack = [root]
        
        while stack != []:
            root = stack.pop()
            if root.val == val:
                return root
            
            if root.right is not None:
                stack.append(root.right)
            if root.left is not None:
                stack.append(root.left)
        
        return None
   
   
Given an integer array nums where the elements are sorted in ascending order, convert it to a height-balanced binary search tree.
A height-balanced binary tree is a binary tree in which the depth of the two subtrees of every node never differs by more than one.

class Solution:
    def sortedArrayToBST(self, nums: List[int]) -> Optional[TreeNode]:
        
        def helper(l, r):
            if l > r:
                return None
            
            m = (l + r) // 2
            root = TreeNode(nums[m])
            root.left = helper(l, m - 1)
            root.right = helper(m + 1, r)
            return root
        
        return helper(0, len(nums) - 1)
        

1046. Last Stone Weight
You are given an array of integers stones where stones[i] is the weight of the ith stone.
We are playing a game with the stones. On each turn, we choose the heaviest two stones and smash them together. Suppose the heaviest two stones have weights x and y with x <= y. The result of this smash is:
If x == y, both stones are destroyed, and
If x != y, the stone of weight x is destroyed, and the stone of weight y has new weight y - x.
At the end of the game, there is at most one stone left.
Return the weight of the last remaining stone. If there are no stones left, return 0.

    def lastStoneWeight(self, stones: List[int]) -> int:
        stones = [-s for s in stones]
        heapq.heapify(stones)
        
        while len(stones) > 1:
            first = heapq.heappop(stones)
            second = heapq.heappop(stones)
            if second > first:
                heapq.heappush(stones, first - second)
        
        stones.append(0)
        return abs(stones[0])
        


2357. Make Array Zero by Subtracting Equal Amounts
You are given a non-negative integer array nums. In one operation, you must:
Choose a positive integer x such that x is less than or equal to the smallest non-zero element in nums.
Subtract x from every positive element in nums.
Return the minimum number of operations to make every element in nums equal to 0.

    def minimumOperations(self, nums: List[int]) -> int:
        
        count = 0
        k = True
        
        while(k):
            nums = [num for num in nums if num > 0]
            if nums != []:
                s = min(nums)
                nums = [(i-s) for i in nums]
                count +=1
            else:
                k = False
        
        return count


167. Two Sum II - Input Array Is Sorted
Given a 1-indexed array of integers numbers that is already sorted in non-decreasing order, find two numbers such that they 
add up to a specific target number. Let these two numbers be numbers[index1] and numbers[index2] where 1 <= index1 < index2 <= numbers.length.
Return the indices of the two numbers, index1 and index2, added by one as an integer array [index1, index2] of length 2.
The tests are generated such that there is exactly one solution. You may not use the same element twice.
Your solution must use only constant extra space.

    def twoSum(self, numbers: List[int], target: int) -> List[int]:
        
        left = 0
        right = len(numbers) - 1
        
        while left <= right:
            if (numbers[left] + numbers[right]) < target:
                left += 1
            elif (numbers[left] + numbers[right]) > target:
                right -= 1
            else:
                return (left + 1), (right + 1)
                
 
 19. Remove Nth Node From End of List
 Given the head of a linked list, remove the nth node from the end of the list and return its head.
     def removeNthFromEnd(self, head: Optional[ListNode], n: int) -> Optional[ListNode]:
        
        dummy = fast = slow = ListNode(0, next=head)
        
        for _ in range(n):
            fast = fast.next
            
        while fast.next:
            fast = fast.next
            slow = slow.next
        
        slow.next = slow.next.next
        
        return dummy.next
